version: '3'
services:
  database:
    image: mysql:5.7
    # expose port 3306 so we can connect to the server with desktop applications like MySQL Workbench, DBeaver, Heidi SQL, etc
    ports:
      - 3306:3306
    env_file:
      - ../../docker/database-root.env  # load the root user password (user root with this password will have full privileges)
      - ../../docker/database.env       # load application specific user and database
    volumes:
      - ../../docker/mysql/data:/var/lib/mysql # create a local volume for the database storage so you won't loose the data if you delete the docker container
      - ../../docker/mysql/sql/:/docker-entrypoint-initdb.d/ # load the sql files from here on database creation

  phpmyadmin:
    image: phpmyadmin
    restart: always
    ports:
      - 8001:80 # open http://localhost:8080 in your browser to access phpmyadmin console
    links:
      - database
    env_file:
      - ../../docker/phpmyadmin.env # load environment variables necessary to create the connection to the database container

  php:
    # for your php application you need to create a docker image
    build:
      dockerfile: ../../docker/php/Dockerfile
    env_file:
      - ../../docker/database.env # load database configurations to be able to connect to the database
    ports:
      - 9000
    volumes:
      - ./code:/var/www/html  # on local development you need to create this volume to load your local project so you can keep making changes to it
      # keep in mind, that the Dockerfile will copy the local project into docker context, will build the application and it will store it in the docker image, but with this option here, you'll overwrite the directory with the application from the container.

  nginx:
    build:
      dockerfile: ../../docker/nginx/Dockerfile
    image: nginx:1.21
    ports:
      - 5000:80
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./code:/var/www/html